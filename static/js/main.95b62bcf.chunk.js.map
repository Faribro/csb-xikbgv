{"version":3,"sources":["TicTacToe/TicTacToe.js","App.js","index.js"],"names":["TicTacToe","useState","turn","setTurn","Array","fill","cells","setCells","winner","setWinner","handleClick","num","squares","combos","across","down","diagnol","combo","forEach","pattern","checkForWinner","alert","Cell","onClick","className","App","ReactDOM","createRoot","document","getElementById","render"],"mappings":"2OAyGeA,EAtGG,WAChB,MAAwBC,mBAAS,KAAI,mBAA9BC,EAAI,KAAEC,EAAO,KACpB,EAA0BF,mBAASG,MAAM,GAAGC,KAAK,KAAI,mBAA9CC,EAAK,KAAEC,EAAQ,KACtB,EAA4BN,qBAAU,mBAA/BO,EAAM,KAAEC,EAAS,KAsClBC,EAAc,SAACC,GACnB,GAAmB,KAAfL,EAAMK,GAAV,CAKA,IAAIC,EAAO,YAAON,GAEL,MAATJ,GACFU,EAAQD,GAAO,IACfR,EAAQ,OAERS,EAAQD,GAAO,IACfR,EAAQ,MAjDW,SAACS,GACtB,IAAIC,EAAS,CACXC,OAAQ,CACN,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAETC,KAAM,CACJ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAETC,QAAS,CACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,KAIX,IAAK,IAAIC,KAASJ,EAChBA,EAAOI,GAAOC,SAAQ,SAACC,GAEK,KAAxBP,EAAQO,EAAQ,KACQ,KAAxBP,EAAQO,EAAQ,KACQ,KAAxBP,EAAQO,EAAQ,KAIhBP,EAAQO,EAAQ,MAAQP,EAAQO,EAAQ,KACxCP,EAAQO,EAAQ,MAAQP,EAAQO,EAAQ,KAExCV,EAAUG,EAAQO,EAAQ,IAE9B,GAEJ,CAkBEC,CAAeR,GACfL,EAASK,EAbT,MAFES,MAAM,kBAgBV,EAOMC,EAAO,SAAH,GAAiB,IAAXX,EAAG,EAAHA,IACd,OAAO,oBAAIY,QAAS,kBAAMb,EAAYC,EAAI,EAAC,SAAEL,EAAMK,IACrD,EAEA,OACE,sBAAKa,UAAU,YAAW,UACxB,kCAAO,SACEtB,EACP,kCACE,+BACE,cAACoB,EAAI,CAACX,IAAK,IACX,cAACW,EAAI,CAACX,IAAK,IACX,cAACW,EAAI,CAACX,IAAK,OAEb,+BACE,cAACW,EAAI,CAACX,IAAK,IACX,cAACW,EAAI,CAACX,IAAK,IACX,cAACW,EAAI,CAACX,IAAK,OAEb,+BACE,cAACW,EAAI,CAACX,IAAK,IACX,cAACW,EAAI,CAACX,IAAK,IACX,cAACW,EAAI,CAACX,IAAK,aAIhBH,GACC,qCACE,8BAAIA,EAAO,qBACX,wBAAQe,QAAS,kBAjCvBd,EAAU,WACVF,EAASH,MAAM,GAAGC,KAAK,IAgCqB,EAAC,SAAC,oBAKlD,ECpGe,SAASoB,IACtB,OACE,qBAAKD,UAAU,MAAK,SAClB,cAAC,EAAS,KAGhB,CCGaE,IAASC,WAAWC,SAASC,eAAe,SAEpDC,OAAO,cAAC,EAAG,I","file":"static/js/main.95b62bcf.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./TicTacToe.css\";\r\n\r\nconst TicTacToe = () => {\r\n  const [turn, setTurn] = useState(\"x\");\r\n  const [cells, setCells] = useState(Array(9).fill(\"\"));\r\n  const [winner, setWinner] = useState();\r\n\r\n  const checkForWinner = (squares) => {\r\n    let combos = {\r\n      across: [\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8]\r\n      ],\r\n      down: [\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8]\r\n      ],\r\n      diagnol: [\r\n        [0, 4, 8],\r\n        [2, 4, 6]\r\n      ]\r\n    };\r\n\r\n    for (let combo in combos) {\r\n      combos[combo].forEach((pattern) => {\r\n        if (\r\n          squares[pattern[0]] === \"\" ||\r\n          squares[pattern[1]] === \"\" ||\r\n          squares[pattern[2]] === \"\"\r\n        ) {\r\n          // do nothing\r\n        } else if (\r\n          squares[pattern[0]] === squares[pattern[1]] &&\r\n          squares[pattern[1]] === squares[pattern[2]]\r\n        ) {\r\n          setWinner(squares[pattern[0]]);\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleClick = (num) => {\r\n    if (cells[num] !== \"\") {\r\n      alert(\"already clicked\");\r\n      return;\r\n    }\r\n\r\n    let squares = [...cells];\r\n\r\n    if (turn === \"x\") {\r\n      squares[num] = \"x\";\r\n      setTurn(\"o\");\r\n    } else {\r\n      squares[num] = \"o\";\r\n      setTurn(\"x\");\r\n    }\r\n\r\n    checkForWinner(squares);\r\n    setCells(squares);\r\n  };\r\n\r\n  const handleRestart = () => {\r\n    setWinner(null);\r\n    setCells(Array(9).fill(\"\"));\r\n  };\r\n\r\n  const Cell = ({ num }) => {\r\n    return <td onClick={() => handleClick(num)}>{cells[num]}</td>;\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <table>\r\n        Turn: {turn}\r\n        <tbody>\r\n          <tr>\r\n            <Cell num={0} />\r\n            <Cell num={1} />\r\n            <Cell num={2} />\r\n          </tr>\r\n          <tr>\r\n            <Cell num={3} />\r\n            <Cell num={4} />\r\n            <Cell num={5} />\r\n          </tr>\r\n          <tr>\r\n            <Cell num={6} />\r\n            <Cell num={7} />\r\n            <Cell num={8} />\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n      {winner && (\r\n        <>\r\n          <p>{winner} is the winner!</p>\r\n          <button onClick={() => handleRestart()}>Play Again</button>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TicTacToe;\r\n","import \"./App.css\";\r\nimport TicTacToe from \"./TicTacToe/TicTacToe\";\r\n\r\nexport default function App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <TicTacToe />\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\n\r\n// ReactDOM.render(\r\n//   <React.StrictMode>\r\n//     <App />\r\n//   </React.StrictMode>,\r\n//   document.getElementById(\"root\")\r\n// );\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\r\n\r\nroot.render(<App />);\r\n\r\n// const hydra = ReactDOM.hydrateRoot(tick, element);\r\n// const hydraEl = <h2>My name is Hydrate, not Hydra! Did you get it now!</h2>;\r\n// hydra.render(hydraEl, element);\r\n\r\n// function tick() {\r\n//   const element = (\r\n//     <div>\r\n//       <h1>Hello!</h1>\r\n//       <h2>It is {new Date().toLocaleTimeString()}.</h2>\r\n//     </div>\r\n//   );\r\n//   root.render(element);\r\n// }\r\n\r\n// setTimeout(tick, 100);\r\n"],"sourceRoot":""}